@inject EventAgregator<Player> EventAgregator
@inject UserStateMaintainer UserStateMaintainer
@inject UserState<Player> UserState
@implements IDisposable
<CascadingValue Value="Player">
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingValue>

@code{
    Player? Player = null;
    protected override void OnInitialized()
    {
        EventAgregator.Subscribe(this,(Player? player) => { PlayerChange(player); StateHasChanged(); }); 
    }

    void PlayerChange(Player? newPlayer)
    {
        if(Player == newPlayer) return;
        if(Player is not null)
        {
            UserState.Unsubscribe(Player, this);
        }
        if(newPlayer is not null)
        {
            UserState.Subscribe(newPlayer, this, (x) => InvokeAsync(() => StateHasChanged()));
        }
        Player = newPlayer;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            UserStateMaintainer.Initialize();
            StateHasChanged();
        }
    }


    public void Dispose()
    {
        EventAgregator.Unsubscribe(this);
        UserState.Unsubscribe(Player, this);
    }
}

