@inject EventAgregator<Player> EventAgregator
@inject UserStateMaintainer UserStateMaintainer
@implements IDisposable
<CascadingValue Value="Player">
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingValue>

@code{
    Player? Player = null;
    protected override void OnInitialized()
    {
        EventAgregator.Subscribe(this,(Player? player) => {Player = player; StateHasChanged(); });   
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            UserStateMaintainer.Initialize();
            StateHasChanged();
        }
    }
    public void Dispose()
    {
        EventAgregator.Unsubscribe(this);
    }
}

