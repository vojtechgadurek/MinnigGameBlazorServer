@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserMaintainer UserMaintainer
@inject GameControler GameControler
@inject EventAgregator<Player?> eventAgregator
@page "/"

<PageTitle>Index</PageTitle>

<AuthorizeView>
	<NotAuthorized>
	<div> Please, log in</div>
	</NotAuthorized>

	<Authorized>
		@if(Player != null){
	<div> Welcome, @Player.Name</div>
	<div> You have @Player.Money $</div>
	<div> You have @Player.Oil units of oil</div>
	<div> Turn @currentCount</div>
			@if(Player.Admin = true)
			{
				<button @onclick="NewRound"> Force new round</button>
			}
		}
	</Authorized>

</AuthorizeView>

@code{
	void NewRound()
	{
		GameControler.ForceNewRound(Player);
		currentCount = GameControler.GetRoundNumber();
	}
	#nullable enable
	public Player? Player = null;

	public int currentCount = 0;

	void OnEvent()
	{
		StateHasChanged();
	}

	protected override void OnInitialized()
	{
		Player = ((UserStateMaintainer) AuthenticationStateProvider).Player;
		eventAgregator.Subscribe((Player? player) => { StateHasChanged(); Player = player; });
	}

	protected override void OnParametersSet()
	{
		Player = ((UserStateMaintainer)AuthenticationStateProvider).Player;
		StateHasChanged();
	}
}