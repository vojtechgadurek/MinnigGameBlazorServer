@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserMaintainer UserMaintainer
@inject EventAgregator<Player?> eventAgregator
@page "/"

<PageTitle>Index</PageTitle>

<AuthorizeView>
	<NotAuthorized>
	<div> Please, log in</div>
	</NotAuthorized>

	<Authorized>
		@if(Player != null){
	<div> Welcome, @Player.Name</div>
	<div> You have @Player.Money $</div>
		}
		lol
		@name
	</Authorized>

</AuthorizeView>

@code{
	public Player? Player = null;
	public string? name;

	public void OnEvent(Player eventObject)
	{
		Player = eventObject;
		StateHasChanged();
	}

	protected override void OnInitialized()
	{
		eventAgregator.Subscribe((player) => { Player = player; StateHasChanged(); return player; });
	}

	protected override void OnParametersSet()
	{
		name = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name;
		if (name is not null)
		{
			Player = UserMaintainer.TryGetPlayerByName(name);
		}
		StateHasChanged();
	}
}