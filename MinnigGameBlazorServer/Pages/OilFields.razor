@inject GameControler GameControler
@inject EventAgregator<Player?> EventAgregator
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserMaintainer UserMaintainer

@page "/oilfields"

<AuthorizeView>
<PageTitle>Oilfield</PageTitle>
	@if (Player is not null)
	{
		@foreach (var oilField in Player.Properties.GetEnumerable())
		{
			if (oilField is OilField)
			{
				<OilFieldComponent OilField="(OilField) oilField"></OilFieldComponent>
			}
		}
	}
	<button class="btn btn-primary" @onclick="TryProspectNewOilField">Try buy new OilField for @GameControler.OilFieldPrice.Amount</button>
</AuthorizeView>


@code {
	private int currentCount = 0;

	public Player? Player = null;


	protected override void OnInitialized()
	{
		EventAgregator.Subscribe((Player? player) => { StateHasChanged(); Player = player; });
		
	}

	protected override void OnParametersSet()
	{
		string? name = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name;
		if (name is not null)
		{
			Player = UserMaintainer.TryGetPlayerByName(name);
		}
		StateHasChanged();
	}

    private void TryProspectNewOilField()
    {
		
        GameControler.TryProspectNewOilField(Player);
    }
}
