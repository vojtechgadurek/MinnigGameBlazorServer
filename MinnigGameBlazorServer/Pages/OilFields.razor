@inject GameControler GameControler
@inject EventAgregator<Player?> EventAgregator
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserMaintainer UserMaintainer
@inject NavigationManager NavigationManager

@page "/oilfields"

@if(Player is null){}
else{
<PageTitle>Oilfield</PageTitle>
	@if (Player is not null)
	{
		@foreach (var oilField in Player.Trader.Properties.GetEnumerable())
		{
			if (oilField is OilField)
			{
				<OilFieldComponent OilField="(OilField) oilField"></OilFieldComponent>
			}
		}
	}
<button class="btn btn-primary" @onclick="TryProspectNewOilField">Try buy new OilField for @GameControler.OilFieldPrice.Amount</button>
}

@code {
	private int currentCount = 0;

	[CascadingParameter]
	public Player? Player { get; set; }


	protected override void OnInitialized()
	{
		if (Player is null) NavigationManager.NavigateTo("singin");
	}


    private void TryProspectNewOilField()
    {
		
        GameControler.TryProspectNewOilField(Player);
    }
}
